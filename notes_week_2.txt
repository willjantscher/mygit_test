10/26/20_______________________________________________________________________________________________  
Object Oriented Programming
    use objects to model real world things

Classes (ES6)
    special functions
    classes are the blueprint of an object, a class can have many objects
    a class is a template, objects are instances of the class
    also have methods available in classes (functions)


Constructor
The constructor method is a special method for creating and initializing an object created with a class. There can only be one special method with the name "constructor" in a class.
    enables you to provide any custom initialization 
    if you don't provide, a default constructor will be supplied

to make a new of a class, let xxxx = neaw Xxxx();


class declaration
    ex:
    class Dog {
    constructor(breed, age) {
        this.breed = breed;
        this.age = age;
    }
}


10/27/20_______________________________________________________________________________________________
Encapsulation

to run code, set Cd to location, type npm 'folder' or 'foler/filename.js/txt etc

Can't use .forEach as an async function, instead use for(var x of y) {}

Command Line Interfaces
Passing in arguments via the command line is an extremely basic programming task, and a necessity for anyone trying to write a simple Command-Line Interface (CLI). In Node.js, as in C and many related environments, all command-line arguments received by the shell are given to the process in an array called argv (short for 'argument values').
    process.argv - argv is the array of command0line arguments

For iterative function, need to return this
    add (item) {
      this.contents.push(item)
      return this
    }

.includes uses object.is
it checks if the specific instance is the same instance


Encapsulation   - restricting access and promoting self containerization
    this
    dependency injection
    polymorphism
    OO Testing

Encapsulation   - process of wrapping property and function within a single unit, in javascript we use encapsulation in the form of classes0 a class is a program-code-template that allows developers to create an object htat has both data and behaviors

    approximate java-style "private" instance fields
    public vs private
    how to enable access to private information in a class
    write setters and getters to tkae the place of setter and getter methods
        getter/accessor -similar to eachother
        setter/mutator -similar to eachother
ES6 adds syntax to make encapsulation easier
.defineProperties() - 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Console Commands

ls - list files (will list all files in current directroy)
pwd - to find out where you are within your computer
mkdir - make directory (make a new folder) add name after
    navigate to there using cd <folder name>
cd -changes directory
    cd or cd ~ - Takes us to the home directory.
    cd <folder name> - Takes us forward one step to the folder that is typed in.
    cd .. - Moves us back one level to the parent folder.
    cd ../.. - Moves us back two levels. Add more /.. for each level we want to navigate up.
clear - clears terminal
touch - creates new file (add extension like .txt)
open - opne a file or folder, input <folder/file name>
history - see commands run in session
cat - see contents of particular file, need to have the right directory
say - makes computer speak to me, need qoutes in this command
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Encapsulation - concept for restricting code stuff

get <functionname> ()   - Getter must not have any formal parameters.
    ex: (non-ES6 version that we will probably never use)
    function Range(from, to) {
        getFrom() {     //accesses
            return from;
        }
        ...
        Object.defineProperties(this, ){
            from: {get: getFrom, set: setFrom, enumberable:true, configruable: false},
            to: {get: getTo, set: setTo, enumerable:true, donfigurable: false}
        }
    }

ES6 example
the reason for not accessing the properties directly is in case you wanted to add functionality without having to refactor... For instance what if you returned the _numberOfFloors property when instead you added a feature that always removed floor 13 as part of the code. If you are using the getter method, you would be returning the right amount but if you read the property direct you would not get the floor removed...
https://repl.it/@GregoryOladipo/Encapsulation-LEARN#index.js

getters and setters - 
    use get to pull information from the object
    use set to tell object to change something
    interacting with the object as opposed to changing it directly (there is a restriction on access, so get and set are used to access the object)
There are 2 kinds of object properties
    The first kind is data properties. We already know how to work with them. All properties that we’ve been using until now were data properties.
    The second type of properties is something new. It’s accessor properties. They are essentially functions that execute on getting and setting a value, but look like regular properties to an external code.

accessors are like methods for accessing or changing properties of a class instance
    get/set keywords have unique and singular purpose
    Getters and setters are just syntactic sugar. The compiler will compile your getters and setters into getter and setter methods eventually. So by writing getter and setter methods yourself, you are kind of doing the job of the compiler.
get/set are useful if you need to execute some function on parameters multiple times throughout your code - ex first and last name seperate, but combine for full name (get) or update with full name (set)

_ indicates a restricted property on a class in javascript
encapsulation: restricting access to instances...

-------------------------------------------------------
this - keyword - refers to some likely-focal object during method or constructor invocation
    des not refer to function itself    
    is the calling context of the function
    The keyword this is an identifier for values (similar to a variable or a function parameter), that is designed to support Object Oriented Programming. 
    The keyword this is almost exclusively useful when it appears within the body of a function, and that's generally where you'll see it.

execution context - the setting a function performs in  
    where -lexical (arrow functions)
    how -dynamic (4 ways to invoke)

types of invocation
    simple invocation
    method invocation
    indirect invocation
    constructor/class invocation
    function invocation
    method invocation

    this can refer to many things

.call -  calls a function with a given this value and arguments provided individually.
.apply - method calls a function with a given this value, and arguments provided as an array (or an array-like object).


var fun = () => {
    log(this)
}

There are only 5 patterns for how the keyword this can appear in your code.

log(this); //GLOBAL REFERENCE => `this` is bound to the global object (which is `windows` in a browser)

fun(); // FREE FUNCTION INVOCATION => `this` is bound to the global object (which is `windows` in a browser)

fun.call(obj); // .call or .apply() INVOCATION => `this` is bound to the first argument to .call() or .apply()

fun.apply(obj); // .call or .apply() INVOCATION => `this` is bound to the first argument to .call() or .apply()

new fun() // CONSTRUCTION MODE => `this` is bound to a new object created for that invocation 


---------------------------------------------------------
Dependancy and injection
    allow an instance to use the methods of another
    we inject one instance into another
        (russian doll)
    Dependency injection is a strategy used to isolate a class from its dependencies.

create a class
another class references instances of another class, and uses their methods/properties

------------------------------------------------------------------------------------------------------------------
Yargs helps you build interactive command line tools, by parsing arguments and generating an elegant user interface.
https://www.npmjs.com/package/yargs
npm i yargs
------------------------------------------------------------------------------------------------------------------


10/27/20_________________________________________________________________________________________________________________________
Command line applications
https://developer.okta.com/blog/2019/06/18/command-line-app-with-nodejs
Command line applications (CLI) are often the core tools for automating tasks, such as deploying production applications, running tests, building reports, migrating data, DevOps, and the list goes on and on.


to initializae a project
type npm init 
    press enter throughout or enter in information
    can set git repository if not automatic

type npm install -g to install an applications
type this to see all globally installed node modules
    npm ls -g --depth=0

Next, we need to add a bin property to our package.json file. This maps the command name (ginit) to the name of the file to be executed (relative to package.json):


------------------------------------------------------------------------------------------------------------------
with Gregory Oladipo


//using z shell, don't have paths set?
//setup the environment
//bash has different files profile,history,rc... these run the environment... need to set the path for my bins
//profiles, omyzshell (get this), run through that, read more documentation

//read different books
//sort by category
//book (Git)
//books on command line (all unix cmds work in linux)
//best book(the linux command line - william e shotts)
//Pythod Crash Course
//lots of work may be re-factoring (update old code)
//book (Refactoring Improving the design of existing code)------------------
//          Clean Code-----------------------------           
    //working effectively with legacy code

//ES6 and Beyond ---------------- book for javascript
    //also, Stoyan Stefanov - Object Oriented JavaScript            ---Javascript: the .... David Flanagan

    //books = organic in-context method for learning
        //do the examples
//commit to reading over time
//commit to x hours a day, always.... 

//program =-==== Notion
    //

------------------------------------------------------------------------------------------------------------------
Asynchronous code review

promises
    write asynchronous code that looks likje synchronous code
    no need to write state-checking code
    AVOID callback hell
var promise = new Promise(executor);    //executor is another function

hoisting
    in javascript, functions are hoisted (reads function delcarations as above everything else)

fetch is a promise!
encapsulation _something
    withing class
    things we don't want to touch directly
    get and set methods
    _ is an indicator that this should never be used outside of a getter/setter

can put multiple promises in an array, call promis.all on the array, and then the output would be an array of all the promises' returns that will be returned after all promises are donfigurable

function needs to be async function if calling fetch inside of it

sourcetree for git stuff
    or the github app
    git the book is free online Orielly

------------------------------------------------------------------------------------------------------------------
polymorphism    (part of object oriented programming)
When multiple classes inherit from the same superclass, there are many interesting properties:
    Each of the subclasses have a common interface. Specifically, that common interface is made up of the instance variables and methods defined in the super class.
    Each of the subclasses have the ability to override a method to provide special implementation while keeping the same interface.
With this in mind, we can design functions that can take in instances of different classes (but share a common super class) and design for this common interface.

polymorphism
        takes advantage of a family of classes and their relationship to their super or parent class
        these subclasses share commonalities with their parents (variables and methods)

        we can use functions to leverage these similar signatures
        SUBCLASSES can OVERRIDE the general/default functionality of their parent by "overriding"
              addFloor() {
                super.addFloor();
                this.specialActionNeeded = true;
                }
child classes inherit the methods of the parent automatically;
    chile will also inherit properties of the parent (without calling super)
    only need to call super for items that are being passed into the child class call -- can just call super()
must call method the exact same name to overide the method of the parent class

dependancy injection (2 instances of different classes, pass on into another to call some function of the first)

can call contructor(...args) {
    super(...args)
}
over riding - child overides parent functions
overloading - same function with different arguments (different parameters being passed in)


------------------------------------------------------------------------------------------------------------------
Object Oriented Testing
USE SOURCE TREE
https://docs.github.com/en/free-pro-team@latest/github/using-git/changing-a-remotes-url 

    When approaching testing in OOP, attempting to make tests pass with the least amount of code possible is the optimal approach.
    The goal is to write the minimum amount of sensible code in order to get the test to pass.
    Do the simplest thing and only do things that are required by the tests.

Describe is a function in the Jasmine testing framework. It simply describes the suite of test cases enumerated by the "it" functions.
    Also used in the mochajs framework.

TESTING (OOP testing) Object Oriented Program
    test driven development - development technique where you must first write a test that fails before you write new functional code
    there are different testing tools that can be used for (mocha, jasmine, etc. )
    if something is capitalized, assume it is a class!!!!!!

npm install --global mocha
NEW section on TDD (test development d...)

10/29/20_______________________________________________________________________________________________
TESTING     ¯\_(ツ)_/¯
    first - run and see what fails
        make tests pass
        refactor
        fails
            repeat
Checkpoint

TDD  - Test-Driven Development
    think about applications rather than just algortihms, we are engineers of digital products
    user stories
    acceptance criteria
        tests run every time there is a change to the codebase
        Platform 1 = where applications are deployed
            unit test, end to end test, etc are run every time there is a change to the code base
MVP = Minimum Viable product

security for the code is done when code is being prepared to being deployed

scope creep - changes over time that add/modify requirements

Definition of done
    The Definition of Done is an agreed upon set of items that must be completed before a project or user story can be considered complete.

user story example:
    as a customer, I want to see that the vending machine has items, so that I can purchase them.
        Acceptance criteria
        definition of done:
            when I approach
            I see items inside that I can buy
        This is the acceptance criteria
            seeSelections() returns an array of objects with item and price:
                [{'crisps': 'Rs 100'}, {'chocolate': 'Rs 350'}, ...]

------------------------------------------------------------------------------------------------------------------
setup directory and move terminal to there
    ls
    mkdir somefoldername
    cd somefoldername
------------------------------------------------------------------------------------------------------------------
jest as testing framework - jest is in node module in npm (node package manager)
    npm init -y         //will create a package.json

package.json    
    is a list of dependancies that are used for an application (they need to add these dependancies)
        these get put in a node modules folder when installed
    scripts section - writing here gives ability to run specific code by typing the script name in the terminal

    package.json can list all versions/ranges of a given package that are required, and npm install would download them all if they are in the package.json


------------------------------------------------------------------------------------------------------------------
TDD Example

make a folder for the test and another for the program
    make a gitignore file   //wont need version control of everything
        touch .gitignore        //makes a file
        echo node_modules/ >> .gitignore        //paste these words inside of it
        cat .gitignore  //check contents of the file
    npm install jest    //install this module here
        this adds jest as a dependancy in the package.json
        //this also makes a node modules folder and stores all modules in here, note we are ignoring this in .gitignore since we don't need to keep this on git
ls -als     //shows more details 

write the test first
    create the file
        touch test/Machine.test.js      will create in the test folder'
            programname.test    --name this way for simplicity
npm install --save-dev jest
    this changes .json dependencies to devDependencies

------------------------------------------------------------------------------------------------------------------
use liveshare
    extensions tab in left of VS code
    click Live Share in bottom left, log in with account
        will do some authorization things
    click liveshare tab on the left
        can add participants
    pushpin in top right, will follow when changing files if selected
------------------------------------------------------------------------------------------------------------------

TDD in practice module
    //30 minutes first 
//git rm -r --cached ./node_modules   to stop tracking files

TDD guide with jest 
    https://www.jstwister.com/post/unit-testing-beginners-guide-testing-functions/


mocking in javascript
    can use a blocking while loop to pause a function... set date and time, then while loop while that - current < wait time.... 
pure function - always returns same thing


when testing
    SEAT
        Setup the problem (declare constants, establish instances of classes) - generate variables and their states
        Exercise (code runing)
        Assert  expect().toBe()
        Teardown (if needed)

use mock to keep tests from running a long time 
    prevent waits in functions
    prevents waiting for data from url
create a mock<> and use that in the tests,
    use the same syntax as would be expected

10/30/20_______________________________________________________________________________________________
testing using mock dependancies
    do not want tests to wait on app latency, change test inputs to mock inputs

const mockSave = jest.fn()         //jest makes jest treat mockSave as a function
    const mockDatabase = {
        save: mockSave
    }
can call mockSave function by typing .... .save

    jest    
        toBe vs toEqual //tobe is more specific, must be the exact same object in memory
        .toHaveBeenCalledWith(input parameter)

npm i -D jest

const start = new Date().getTime()
while (new Date().getTime() < start + 5000) {}
    //this simulates 5 seconds of latency
//some code that will run after the delay

DAO = Data Access Object

object  (has keys and values)
const person = { firstName: 'Katie', lastName: 'Hoesley' }
    access a value by --- person.firstName (will be Katie)


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
example of using mock 
https://codewithhugo.com/jest-mock-spy-module-import/


// PersonDataAccessObject.js

class PersonDataAccessObject { 
  constructor(database) {
    this.database = database
  }

  saveToDatabase(person) {
    this.database.save(person)
  }
}

// do not modify the above PersonDataAccessObject

// PersonDataAccessObject.test.js

describe('the PersonDataAccessObject', () => {
  it('calls the function that would save Ada Lovelace to the database', () => {
    //setup
    const mockSaveMethod = jest.fn() // replace undefined with the appropriate mock for saving to the database
    const mockDatabase = {
      save: mockSaveMethod
    }; //replace undefined with the appropriate mock for a database
    const personDataAccessObject = new PersonDataAccessObject(mockDatabase) 
    const expected = {firstName: 'Ada', lastName: 'Lovelace'}

    // exercise
    personDataAccessObject.saveToDatabase(expected);
    
    // assert
    expect(mockSaveMethod).toHaveBeenCalledWith(expected);
  })
})
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------






