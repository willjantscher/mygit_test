git
______________________________________________________________________________________________________________________________________________________________

right click on folder, git bash here - sets up git window at location

touch app.html - creates html doc at locaiton

git init - creates a git repository at the location

$ git config --global user.name 'Will Jantscher'

$ git config --global user.email 'william.jantscher@gmail.com'

git add index.html - adds file to git repository

git status - show what is in the staging area

git add *.html - adds all html files to staging area

git add . - adds all files to staging area

git commit - commit files

$ git commit -m 'changed app.js' - includes comment in the command

$ touch .gitignore - which files for git to ignore, just put file names in here.

$ git branch login - adds a new branch

git checkout login - switch to login branch

git push - pushes everything to github

git pull - pulls from github

10/19/20______________________________________________________________________________________________________________________________________________________________

Pair Programming

pair programming - An Extreme Programming practice in which two engineers participate in one development effort at one workstation. Each member performs the action the other is not currently doing: While one types in Unit Tests the other thinks about the class that will satisfy the test, for example.
the programmer at the keyboard - the driver
the other focused on overall direction is the navigator
swap roles every few minutes or so 

why write in pairs?
code quality
Bus effect - if someone leaves from the project, the other can continue the project
transfer of knowledge - senior and junior (experience)
fewer bugs 
culture change

navigator
keeps big picture in mind
knows where you are going
gives high or mid-level instructions
not describing syntax

driver
writes the code
proving/disproving theories by testing 
asking questions

pairing technique is influenced by skill levels
narrow - ping pong/ take turns often
both: values of respect and communication
wide - more experienced dev should spend more time navigating

establish a good flow
when do we switch? set a timer, natural breaks (commit/push, lunch), one pair is getting frustrated/disengaged
ask to vocalize thoughts, increase wait time, be patient, don't type until you vocalize
use feedback - kind, actionable, specific, consensual
key - engagement - do what works for your pair

45 minutes in code wars
until 11:30 
Peter Vayda at LA AFB pairing partner - experience in js and coding

As a Senior Developer working with a Junior Developer, your job is to teach and mentor. In this scenario, the goal is not to get things done as quickly as possible, but instead to make sure the Junior developer is aware of what is happening.
As a Junior Developer working with someone more experienced, your top priority is to learn. The best method of learning is by doing, so try to do most of the typing.

pair feedback - Through constant feedback about their previous efforts, teams can identify areas for improvement and revise their practices. Feedback also supports simple design. Your team builds something, gathers feedback on your design and implementation, and then adjust your product going forward.

______________________________________________________________________________________________________________________________________________________________
JavaScript fundamentals
ES6 - Modern JavaScript, released 2015

destructuring objects (good for large objects)
{} is an object

var user = {
    first: 'benji',
    last: 'marinacci'
};

var first = user.first
var last = user.last; //old structure

var {first, last) = user}; //new structure

first; //=> benji

spread operator
use if we don't know how many arguments will be coming in

arrow function expression (es6 syntax)
const someNewFunction = () => {
    console.log('something')
}

default parameters
in function, set the default for something so if it not assigned it will have initial values
function someNewFunction(greeting = 'hi') {
    return greeting //doew not return undefined since greeting is defined in the function
}

//template literals 
function someNewFunction(greeting, name) {
    return greeting + ' ' + name + '!welcome to our website'
    return `${greeting} ${name}! Welcome to our website`
}

someNewFunction('sup', 'dog')


for...of Loop

var nums = [1, 4, 6, 7];

for (var val of nums) {
    console.log(val);
    //console.log(nums.indexOf(val));
}

let, const, var

var - sets a variable, can be reassigned/changed (global/function scoped) (can be outside of if/for/while loops)
const - cannot be reassigned, but it can be changed/modified (example, add to)
let - can be updated but not redeclared, block scoped (only available inside the scope it's declared ex. in for loop)
block has {}


explicit return
const canDrive = (person) => {
  if (person.age > 15) {
    return true
  } else {
    return false
  }
}

implicit return
const canDrive = person =>
  person.age > 15


const createProject = (name) => ({name})

spread operator/clone/delete/modify properties


let updateAge = (object, age) => {
    const output = {
        ...object,
        age: age,
    }
    return output;
}

let printArgs = (...args) => {
    //print all arguments, unkown ammount, want them in an object
    return args;
}
//NOTE - this returns averything as an array

function address({street, city, state, zip}) {
  return `${street}, ${city}, ${state} ${zip}`
}


scopes and closures
scope - reference to where values, objects and functions can be accessed
global scope: includes variables declared outside of a function
local scope: includes variables declared inside of a function
function- variables declared in function are only visible within the function block
block - {}
code - the code inside the current block

try to minimize global variables
return function (){} inside of a function  is not calling the function
can execute both functions if you do function()() or if you do newFunction = function ();

closures
closure - where an inner function has access to the outer (enclosed) functions variables, this creates a scope chain
scope chains have access to its own scope, access to its outer functions variables, and access to global scope variables
lexical scope: a variable defined outside of a function can be accessible inside of another function defined after variable declaration

return innerFunc; //if not called, will read out [Function: innerFunc]

function outerFunc() {
  let outerVar = 'I am ouside!';

  function innerFunc() {
    var name = 'poli';
    console.log(name);
    console.log(outerVar);
  }
  console.log(outerVar);
  return innerFunc;
};

// outerFunc();
var myInnerFunc = outerFunc();
myInnerFunc();

closure stuff
Here's a slightly more interesting exampleâ€”a makeAdder function:

function makeAdder(x) {
  return function(y) {
    return x + y;
  };
}

var add5 = makeAdder(5);
var add10 = makeAdder(10);

console.log(add5(2));  // 7
console.log(add10(2)); // 12


Recursion
