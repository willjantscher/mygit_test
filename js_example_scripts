You are given an array (which will have a length of at least 3, but could be very large) containing integers. The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer N. Write a method that takes the array as an argument and returns this "outlier" N.

Examples
[2, 4, 0, 100, 4, 11, 2602, 36]
Should return: 11 (the only odd number)

[160, 3, 1719, 19, 11, 13, -21]
Should return: 160 (the only even number)


function findOutlier(integers){
  var even = 0;
  var odd = 0
  var evennum;
  var oddnum;
  for (var int of integers)
    {
      if (int%2 === 0)
        {
         even++;
          evennum = int;
        }
      else if (int%2 !== 0)
       {
          odd++;
         oddnum = int;
       }
    }
  if (even > 1)
    {
      return oddnum;
    }
  else if (odd > 1)
    {
      return evennum;
    }
}

___________________________________________________________________________________________________________________________________________________

Check to see if a string has the same amount of 'x's and 'o's. The method must return a boolean and be case insensitive. The string can contain any char.

Examples input/output:

XO("ooxx") => true
XO("xooxx") => false
XO("ooxXm") => true
XO("zpzpzpp") => true // when no 'x' and 'o' is present should return true
XO("zzoo") => false



function XO(str) {
    arr = str.split('');
    numX = 0;
    numO = 0;
    for (var i = 0; i < arr.length; i++)
      {
        if (arr[i] === 'x' || arr[i] === 'X')
          {
            numX++;
          }
        else if (arr[i] === 'o' || arr[i] === 'O')
          {
            numO++;
          }
      }
  if (numX === numO)
    {
      return true;
    }
  else
    {
      return false;
    }
}

___________________________________________________________________________________________________________________________________________________
//destructuring objects

const student = {
  name: 'katie',
  age: 28,
  location: 'minnesota',
  occupation: 'teacher',
  pets: [
    {name: 'lenny', type: 'dog'}
  ]
}

//destructure this
var {name, occupation, pets} = student

//print Katie
console.log(name)

//print 'dog'
console.log(pets[0].type)

//print teacher
console.log(occupation)


___________________________________________________________________________________________________________________________________________________
//destructure array;
//always starts at 0 index

var numbers = [1, 2, 3, 4];

var uno = numbers[0];
var uno = numbers[0];
var uno = numbers[0];

var [uno, dos, tres] = numbers;

console.log(uno);



___________________________________________________________________________________________________________________________________________________

const countries = ['Germany', 'USA', 'England', 'Thailand', 'Mexico'];

var [one, two, three, four, five] = countries
console.log(five)

___________________________________________________________________________________________________________________________________________________
//spread operator (dont know how many inputs)

var someFunction = (...args) => {
  console.log(args);
}

someFunction('hi', 'hello', 'goodbye');


___________________________________________________________________________________________________________________________________________________
//example of object.assign - create shallow copies of objects

const user = { username: 'angelica' }

const adminUser = Object.assign({}, user, { admin: true })

console.log(user)
// => { username: 'angelica' }

console.log(adminUser)
// => { username: 'angelica', admin: true }
___________________________________________________________________________________________________________________________________________________

//add/change/delete properties
const clock = {
  hours: 13,
  minutes: 40,
}

const clone = {
  ...clock,
  seconds: 46,
}
// clock => { hours: 13, minutes: 40 }
// clone => { hours: 13, minutes: 40, seconds: 46 }

const clock = {
  hours: 13,
  minutes: 40,
  seconds: 23,
}

const clone = {
  ...clock,
  minutes: 12,
}
// clock => { hours: 13, minutes: 40, seconds: 23 }
// clone => { hours: 13, minutes: 12, seconds: 23 }

const clock = {
  hours: 13,
  minutes: 40,
  seconds: 23,
}

const { seconds, ...clone } = clock
// clock => { hours: 13, minutes: 40, seconds: 23 }
// clone => { hours: 13, minutes: 12 }
___________________________________________________________________________________________________________________________________________________
var nums = [1, 4, 6, 7];

for (var val of nums) {
    console.log(val);
}

___________________________________________________________________________________________________________________________________________________

//example for scope
function outerFunc() {
  let outerVar = 'I am ouside!';

  function innerFunc() {
    var name = 'poli';
    console.log(name);
    console.log(outerVar);
  }
  console.log(outerVar);
  return innerFunc;
};

// outerFunc();
var myInnerFunc = outerFunc();
myInnerFunc();
___________________________________________________________________________________________________________________________________________________

//example of recursion
var factorial = (number) => {
  // If the number is negative, it doesn't have a factorial. Return an
  // impossible value to indicate this.
  if (number < 0) {
    return -1;
  }

  // If the number is zero, its factorial is one.
  if (number === 0) {
    return 1;
  }

  // If the number is neither illegal nor zero, call factorial again,
  // this time passing in a smaller number. Eventually we'll reach 0,
  // causing each call to return to its caller and the recursion terminates.
  return (number * factorial(number - 1));
}
console.log(factorial(5));

___________________________________________________________________________________________________________________________________________________

//another example of recursion

const countDownNums = (seconds) =>
{
  if (isNaN(seconds))
  {
    return NaN;
  }
  else if (seconds < 0)
  {
    return 'No negative numbers'
  }
  else if (seconds == 0)
  {
    console.log('we have lift off!');
    return;
  }
  console.log(seconds);
  countDownNums(seconds - 1);
}

countDownNums(10);

___________________________________________________________________________________________________________________________________________________

//yet another example of recursion
//note, you can initialize a variable (output in this instance) by declaring it as parameter of the parent function
function reverseString(output, string) {
  if (string.length === 0)
  {
    console.log(output);
    return output;
  }
  else
  {
    reverseString(output.concat(string.charAt(string.length-1)),string.slice(0, -1));
  }
}
reverseString('',"hello world");



function reversString(string) {
  if(typeof string !== 'string')
  {
    return
  }
  if(string.length === 0) {
    return "";
  }
  else {
    //console.log(string);
    return reverseString(string.substring(1)) + string[0] //.substring is the string starting at var 1 (or the second variable), 
  //ello + h 
  //llo + e  + h
  //lo + l + e + h
  //0 + l + l + e + h
  //each time the recursive function is called, the values are put into a stack, then combined when escape criteria are met
  //call stack here
    //Hello
                //f(ello)        + H
                //f(llo) + e
            //f(lo) + l
        //f(o) +l
  //f('') + o

  }
}

___________________________________________________________________________________________________________________________________________________
//example of recursion with loops
//each instance of the recursion pauses the previous one and it's variables are saved at that point
//

1	var rockPaperScissors = (rounds) => {
2	  var outcomes = [];
3	  //create the result array
4	  var plays = ['rock', 'paper', 'scissors'];
5	  //array of possible outcomes
6	  var getOutcomes = (playedSoFar, roundsLeft) => {    
7	    if (roundsLeft === 0) {
8	      outcomes.push(playedSoFar);
9	    }
10	    else {
11	      for (var i = 0; i < plays.length; i++) { //can also do for(x in plays) and then plays[x]
12	        getOutcomes(playedSoFar.concat(plays[i]), roundsLeft-1);
13	      }
14	    }
15	  };
16	  getOutcomes([], rounds);
17	  return outcomes;
18	};
19	rockPaperScissors(3);


//another example
var rockPaperScissors = (numberOfPlays) => {
  //declare output array
  var outcomes = [];
  var plays = ["rock", "paper", "scissors"];
  //declare the function
  function recurse (list, n) { //list: list of plays we're going to build, n: number of plays we have remaining
  if(n === 0) {
    outcomes.push(list)//if no plays left, the list will be numberOfPlays
  }
  else {
    for (const play of plays) {
      list.push(play)
      const l = list.slice() //making a copy of the array 'list'
      recurse(l, n-1) // n-1 = one less # of plays remaining
      list.pop(); //undo the play you just made, remove last item from list array
    }
  }
  }
  recurse([], numberOfPlays);
  return outcomes;
};
rockPaperScissors(3);
______________________________________________________________________________________________________________________
DATA STRUCTURS

//Stack Class
class Stack {

    constructor() {
        this.items = [];
    }

    push(element) {
        this.items.push(element);
    }

    pop() {
        return this.items.pop();
    }

    size() {
      return this.items.length;
    }

    peek() {
      return this.items[this.items.length - 1]
    }

    isEmpty() {
      return this.items.length === 0;
    }

    printStack() {
     return this.items.join(' ');
     
    }
}

//Que Class
class Queue {

    constructor() {
        this.items = [];
    }

    enqueue(element) {
        return this.items.push(element);
    }

    size() {
      return this.items.length;
    }

    dequeue() {
     return this.items.shift();
    }

    front() {
        return this.items[0];
    }

    isEmpty() {
        return this.items.length === 0;
    }

 printQueue() {
     return this.items.reverse().join(' ');
    }
}

//Linked List Class
//like making a class
var Node = (value) => {
  var node = {} //create the empty object

  node.value = value;   //add fields/key value pairs
  node.next = null;

  return node;  //passing back the node that was created
}

class LinkedList {  //when test code is calling, it populates the list

//this is how it looks before any values
  constructor() {
      var list = {}
      this.head = null;
      this.tail = null;
  }

  addToTail(value) {
      var newNode = Node(value);    //create new node
      if(this.head === null && this.tail === null) {    //check if there are any nodes
          this.head = newNode;
          this.tail = newNode;
      }
      else {
          this.tail.next = newNode  //have the old tail point to the newNode
          this.tail = newNode;  //set the new tail to newNode
      }
  }

  removeHead() {
    //var placeHolder = this.head.value;
        if (this.head.value === null)
    {
        return null;
    }
    else
    {
        var n = this.head.value;
        var head = this.head;
        var newHead = head.next;
        this.head = newHead;
        return n;
    }
  }

  contains(target) {
      var currentNode = this.head
      while(currentNode)
      {
          if(currentNode.value === target)
          {
              return true
          }
          else{
              currentNode = currentNode.next
          }
      }
      return false;
  }
}

//Tree Class (some errors here)
var Tree = function(value) {    //when a var is capitalized, it is like a class
  var newTree = {};
  newTree.value = value;

  // your code here
  newTree.children = [];  // fix me

    var extend = function(obj1, obj2) {
        for(var key in obj2) {
            obj1[key] = obj2[key]; //take properties from second object and adding to the first
        }
    }
    extend(newTree, treeMethods);
    return newTree;
};

var treeMethods = {};

treeMethods.addChild = function(value) {
    this.children.push(Tree(value));
};

treeMethods.contains = function(target) {
    if(this.value === target) {
        return true;
    }
    for(var i = 0; i < this.children.length; i++)
    {
    if(this.children[i].contains(target))
        {
        return true;
        }
    }
    return false;
};




//Binary Search Tree
var BinarySearchTree = function(value) {
  //TODO: IMPLEMENT THE ABOVE METHODS ON THE BST CLASS
  var newBinTree = {}
  newBinTree.left = null
  newBinTree.right = null
  newBinTree.value = value
  
  newBinTree.insert = function(value) {
      let node = this
      while (true) {
          if (value < node.value) {
              if (node.left === null) {
                  node.left = BinarySearchTree(value)
                  return
              } else {
                  node = node.left
              }
          } else if (value > node.value) {
              if (node.right === null) {
                  node.right = BinarySearchTree(value)
                  return
              } else {
                  node = node.right
              }
          } else {
              return
          }
      }
  }
  
  newBinTree.contains = function(value) {
      let node = this
      while (true) {
          if (value < node.value) {
              if (node.left === null) {
                  return false
              } else {
                  node = node.left
              }
          } else if (value > node.value) {
              if (node.right === null) {
                  return false
              } else {
                  node = node.right
              }
          } else {
              return true
          }
      }
  }
  
  newBinTree.depthFirstLog = function(cb) {
      function recurse(node) {
          if (node === null) {
              return
          }
          node.value = cb(node.value)
          recurse(node.left)
          recurse(node.right)
      }
      recurse(this)
      
  }
  
  return newBinTree
};

//Graph Class
// Instantiate a new graph
var Graph = function() {
    this.nodes = {}
};
// Add a node to the graph, passing in the node's value.
Graph.prototype.addNode = function(node) {
    this.nodes[node] = []
};
// Return a boolean value indicating if the value passed to contains is represented in the graph.
Graph.prototype.contains = function(node) {
    return this.nodes[node] ? true : false 
};
// Removes a node from the graph.
Graph.prototype.removeNode = function(node) {
    delete this.nodes[node]
    
    for(let n in this.nodes) {
        if(this.nodes[n].includes(node)) {
            this.nodes[n].splice(this.nodes[n].indexOf(node), 1)
        }
    }
};
// Returns a boolean indicating whether two specified nodes are connected.  Pass in the values contained in each of the two nodes.
Graph.prototype.hasEdge = function(fromNode, toNode) {
    return (this.nodes[fromNode].includes(toNode))
};
// Connects two nodes in a graph by adding an edge between them.
Graph.prototype.addEdge = function(fromNode, toNode) {
    if(!this.hasEdge(fromNode, toNode)) {
        this.nodes[fromNode].push(toNode)
        this.nodes[toNode].push(fromNode)
    }
};
// Remove an edge between any two specified (by value) nodes.
Graph.prototype.removeEdge = function(fromNode, toNode) {
    this.nodes[fromNode].splice(this.nodes[fromNode].indexOf(toNode), 1);
    this.nodes[toNode].splice(this.nodes[toNode].indexOf(fromNode), 1);
};
// Pass in a callback which will be executed on each node of the graph.
Graph.prototype.forEachNode = function(cb) {
    for(let key in this.nodes) {
        cb(key)
    }
};

//Set Class
var Set = function() {
  var set = Object.create(setPrototype);
  set._storage = {}; // fix me
  return set;
};
var setPrototype = {};
setPrototype.add = function(item) {
    this._storage[item] = ""
};
setPrototype.contains = function(item) {
    if(item in this._storage) {
        return true; 
    } else {
        return false
    }
};
setPrototype.remove = function(item) {
    delete this._storage[item]
};

//Hash Table Class
// This class represents an array with limited functionality and a maximum size.
// It will ensure that you don't accidentally try to use up too much space.
//
// Usage:
//   limitedArray.set(3, 'hi');
//   limitedArray.get(3); // returns 'hi'
var LimitedArray = function(limit) {
  var storage = [];
  var limitedArray = {};
  limitedArray.get = function(index) {
    checkLimit(index);
    return storage[index];
  };
  limitedArray.set = function(index, value) {
    checkLimit(index);
    storage[index] = value;
  };
  limitedArray.each = function(callback) {
    for (var i = 0; i < storage.length; i++) {
      callback(storage[i], i, storage);
    }
  };
  var checkLimit = function(index) {
    if (typeof index !== 'number') {
      throw new Error('setter requires a numeric index for its first argument');
    }
    if (limit <= index) {
      throw new Error('Error trying to access an over-the-limit index');
    }
  };
  return limitedArray;
};
// This is a "hashing function". You don't need to worry about it, just use it
// to turn any string into an integer that is well-distributed between the
// numbers 0 and `max`
var getIndexBelowMaxForKey = function(str, max) {
  var hash = 0;
  for (var i = 0; i < str.length; i++) {
    hash = (hash << 5) + hash + str.charCodeAt(i);
    hash = hash & hash; // Convert to 32bit integer
    hash = Math.abs(hash);
  }
  return hash % max;
};
///////////TYPE BELOW HERE! 
var HashTable = function() {
  this._size = 0;
    this._limit = 8;
  this._storage = LimitedArray(this._limit);
};
HashTable.prototype.insert = function(k, v) {
  var index = getIndexBelowMaxForKey(k, this._limit);
  var bucket = this._storage.get(index) || [];
  for (var i = 0; i < bucket.length; i++) {
    var tuple = bucket[i];
    if (tuple[0] === k) {
      var oldValue = tuple[1];
      tuple[1] = v;
      return oldValue;
    }
  }
  bucket.push([k, v]);
  this._storage.set(index, bucket);
  this._size++;
  if (this._size > this._limit * 0.75) {
    this._resize(this._limit * 2);
  }
  return undefined;
  };
HashTable.prototype.retrieve = function(k) {
  var index = getIndexBelowMaxForKey(k, this._limit);
  var bucket = this._storage.get(index) || [];
  for (var i = 0; i < bucket.length; i++) {
    var tuple = bucket[i];
    if (tuple[0] === k) {
      return tuple[1];
    }
  }
  return undefined;
  };
HashTable.prototype.remove = function(k) {
  var index = getIndexBelowMaxForKey(k, this._limit);
  var bucket = this._storage.get(index) || [];
  for (var i = 0; i < bucket.length; i++) {
    var tuple = bucket[i];
    if (tuple[0] === k) {
      bucket.splice(i, 1);
      this._size--;
      if (this._size < this._limit * 0.25) {
        this._resize(Math.floor(this._limit / 2));
      }
      return tuple[1];
    }
  }
  return undefined;
  };
HashTable.prototype._resize = function(newLimit) {
  var oldStorage = this._storage;
  // min size of 8, return if nothing to do!
  newLimit = Math.max(newLimit, 8);
  if (newLimit === this._limit) { return; }
  this._limit = newLimit;
  this._storage = LimitedArray(this._limit);
  this._size = 0;
  oldStorage.each(function(bucket) {
    if (!bucket) { return; }
    for (var i = 0; i < bucket.length; i++) {
      var tuple = bucket[i];
      this.insert(tuple[0], tuple[1]);
    }
  }.bind(this));
};

___________________________________________________________________________________________________________________________________________________
//higher order functions
const locationData = [
  { cityName: 'Naples', state: 'Florida', averageTemp: 76, airport: false, previouslyHostedOlympics: false },
  { cityName: 'Minneapolis', state: 'Minnesota', averageTemp: 55, airport: true, previouslyHostedOlympics: false },
  { cityName: 'Los Angeles', state: 'California', averageTemp: 90, airport: false, previouslyHostedOlympics: false },
  { cityName: 'Milwaukee', state: 'Wisconsin', averageTemp: 43, airport: false, previouslyHostedOlympics: true },
  { cityName: 'New York City', state: 'New York', averageTemp: 62, airport: true, previouslyHostedOlympics: false },
  { cityName: 'Anchorage', state: 'Alaska', averageTemp: 33, airport: true, previouslyHostedOlympics: false },
  { cityName: 'Seattle', state: 'Washington', averageTemp: 72, airport: false, previouslyHostedOlympics: true },
  { cityName: 'Portland', state: 'Oregon', averageTemp: 40, airport: false, previouslyHostedOlympics: true } 
]

// I want all city names 
console.log(locationData.map(city => {return city.cityName}));

// I want all entries where there are airports
console.log(locationData.filter(airport => {return airport.airport === true}))

// I want all city and states - formatted like 'City, State' -- whose average temperature is above 50 degrees 
const cityState = locationData.filter(entry => entry.averageTemp > 50).map(entry => {
  return `${entry.cityName}, ${entry.state}`
})
console.log(cityState)

// I want all city names where the average temp is below 50 degrees 


// I'd like the average temperature of the listed cities 
console.log(locationData.map(city => city.averageTemp).reduce((result, temp) => result + temp)/locationData.length)


// I'd like all state names where the average temp is greater than 70
console.log(locationData.filter(place => place.averageTemp > 70)
.map(place => place.state)
)

// I'd like all entries where the olympics have NOT previously been held 
let noCityOlympics = locationData.filter(city => !city.previouslyHostedOlympics)  //! is same as checking if false
console.log(noCityOlympics)
___________________________________________________________________________________________________________________________________________________
//Use Array's reduce, map and filter (or at least two of them) methods to reduce the input array of student data to an average age of the entire class.

const students = [
    { name: "Stephen", age: 24 },
    { name: "Alice", age: 19 },
    { name: "Jordan", age: 29 },
    { name: "Julie", age: 21 },
    { name: "Chris", age: 26 }
]

//use map to pull ages only
//use reduce to sum all the values, then divide by students.length
const averageAge = students.map(ages => {return ages.age}).reduce((result,element) => {return result + element})/students.length;
console.log(averageAge);


___________________________________________________________________________________________________________________________________________________
//example for making a counter of leaves on a tree

var Tree = function (value) {
  this.value = value;
  this.children = [];
};

Tree.prototype.countLeaves = function () {  //passing in a value, each value has .value and .children array
    var counter = 0;  //does not reset every time since each recursion has its
    if(this.children.length === 0)
    {
        counter ++;
    }
    else 
    {
        for(let i = 0; i < this.children.length; i++)
        {
            counter += this.children[i].countLeaves()
        }
    }
    return counter;
};

// NOTE: You shouldn't need to change anything below here, but feel free to look.

Tree.prototype.addChild = function (child) {
  if (!child || !(child instanceof Tree)) {
    child = new Tree(child);
  }

  if (!this.isDescendant(child)) {
    this.children.push(child);
  } else {
    throw new Error('That child is already a child of this tree');
  }
  return child;
};


Tree.prototype.isDescendant = function (child) {
  if (this.children.indexOf(child) !== -1) {
    return true;
  } else {
    for (var i = 0; i < this.children.length; i++) {
      if (this.children[i].isDescendant(child)) {
        return true;
      }
    }
    return false;
  }
};

Tree.prototype.removeChild = function (child) {
  var index = this.children.indexOf(child);
  if (index !== -1) {
    this.children.splice(index, 1);
  } else {
    throw new Error('That node is not an immediate child of this tree');
  }
};


module.exports = { Tree };



___________________________________________________________________________________________________________________________________________________

asynchronous code

////// Callback Examples ///////// 

// const first = () => {
//   console.log(1)
// }

// const second = () => {
//   console.log(2)
// }

// first()
// second()


// NOW WHAT IF WE USE SETTIMEOUT 

// const first = () => {
//   setTimeout( () => {
//     console.log(1)
//   })
// }

// const second = () => {
//   console.log(2)
// }

// first() 
// second()



// //////// EXAMPLE 2 /////////

// const multiplyInputsByThree = (collection, callback) => {
//   var newCollection = []
//   for(let i = 0; i < collection.length; i++) {
//     // WHAT SHOULD I DO HERE?
//     newCollection.push(callback(collection[i]) )
//   }
//   return newCollection
// }

// //DEFINE THE CALLBACK 
// const multiply = (value) => {
//   return value * 3
// }

// // INPUT COLLECTION 
// const numbers = [1, 2, 3, 4, 5]

// console.log(multiplyInputsByThree(numbers, multiply))




//////// EXAMPLE 3 /////////

const randomFunction = (thing) => {
        setTimeout(() => {  console.log("First call!", thing) }, 1000)
        setTimeout(() => {  console.log("Second call!", thing) }, 500)
        setTimeout(() => {  console.log("Third call!", thing) }, 200)
}

randomFunction('hi')



___________________________________________________________________________________________________________________________________________________
//File I/O 
Write a function called myFunction that reads a list of names from a file and capitalizes any uncapitalized names. Then write to update the file in place.

NOTES:

For this example, use the synchronized versions of the read and write functions
You do not need the require statement, var fs = require("fs") is already implemented
Input example looks like this:
michael smith
john doe
jane doe
kim brown
Output example looks like this:
Michael Smith
John Doe
Jane Doe
Kim Brown


function myFunction(input){

  //no need for the require statement as it is already implemented
  //var fs = require("fs")

  // ..........YOUR CODE HERE..........
  // use the below methods in your code (you will need to change the passsed in parameters)

    
  //Reads an input file and returns the contents as a string
  //regular expressions
  
  const capitalize = (string) => {
      return string.charAt(0).toUpperCase() + string.slice(1)
  }
  
  let data = fs.readFileSync(input)
  let caps = data.toString()
  caps = caps.split(' ').map(capitalize).join(' ')
  caps = caps.split('\n').map(capitalize).join('\n')
  
  fs.writeFileSync(input, caps)
}




function myFunction(input){

  //no need for the require statement as it is already implemented
  //var fs = require("fs")

  // ..........YOUR CODE HERE..........
  // use the below methods in your code (you will need to change the passsed in parameters)

    
  //Reads an input file and returns the contents as a string
  //regular expressions
  const regex = /(\b[a-z])/g    //regular expression, looking for patterns, finds each word
  var myData = fs.readFileSync(input, (err, data) => {
      if (err) throw err;
        });
        
      var temp = myData.toString().replace(regex, (x) => {
          return x.toUpperCase()
      });
      
  //writes the contents to a file
  fs.writeFileSync(input, temp, (err) => {
      if (err) throw err;
        }
      );
}


___________________________________________________________________________________________________________________________________________________
File I/O
Write a function called myFunction that reads from a csv file, parses the csv contents into objects, writes the result to a JSON file, and deletes the original csv file

NOTES:

For this example, use the synchronized versions of the read, write, and unlink functions
You do not need the require statement, var fs = require("fs") is already implemented
Input csv file example looks like this:
First Name,Last Name
Mike,Smith
Jane,Doe
Output json file example looks like this:
[{"First Name":"Mike","Last Name":"Smith"},{"First Name":"Jane","Last Name":"Doe"}]


function myFunction(input,output){

  //no need for the require statement as it is already implemented
  //var fs = require("fs")

  // ..........YOUR CODE HERE..........
  // use the below methods in your code (you will need to change the passsed in parameters)

  //Reads an input file and returns the contents as a string
  let data = fs.readFileSync(input);    //read input data and assigning to data variable
  data = data.split('\n').filter(line => line !== "")
            .map(line => line.split(','))
  let key1 = data[0][0];
  let key2 = data[0][1]
  
  let objArray = []
  
  for(let i = 1; i < data.length; i++) {
      let obj = {}
      obj[key1] = data[i][0]
      obj[key2] = data[i][1]
      objArray.push(obj)
  }
  

  //writes the contents to a file
  fs.writeFileSync(output, JSON.stringify(objArray));
  
  // deletes a file
  fs.unlinkSync(input)

}
___________________________________________________________________________________________________________________________________________________

promises - https://repl.it/@bwreid/Introduction-to-Promises#main.js
https://repl.it/@WillJantscher/Introduction-to-Promises-Exercise


var promise = new Promise(function(resolve, reject) { 
    resolve('Galvanize'); 
}) 

promise 
    .then(function(successMessage) { 
        console.log(successMessage); 
    }, function(errorMessage) { 
        console.log(errorMessage); 
    }) 


    -----------------------------------

var promise = new Promise(function(resolve, reject) {
  /* Do something, possibly async, then... */

  if (/* everything turned out fine */) {
    resolve("Stuff worked!");
  }
  else {
    reject(Error("It broke"));
  }
});

-------------------------------------------

doSomething()
.then(function(result) {
  return doSomethingElse(result);
})
.then(function(newResult) {
  return doThirdThing(newResult);
})
.then(function(finalResult) {
  console.log('Got the final result: ' + finalResult);
})
.catch(failureCallback);



