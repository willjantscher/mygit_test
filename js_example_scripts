You are given an array (which will have a length of at least 3, but could be very large) containing integers. The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer N. Write a method that takes the array as an argument and returns this "outlier" N.

Examples
[2, 4, 0, 100, 4, 11, 2602, 36]
Should return: 11 (the only odd number)

[160, 3, 1719, 19, 11, 13, -21]
Should return: 160 (the only even number)


function findOutlier(integers){
  var even = 0;
  var odd = 0
  var evennum;
  var oddnum;
  for (var int of integers)
    {
      if (int%2 === 0)
        {
         even++;
          evennum = int;
        }
      else if (int%2 !== 0)
       {
          odd++;
         oddnum = int;
       }
    }
  if (even > 1)
    {
      return oddnum;
    }
  else if (odd > 1)
    {
      return evennum;
    }
}

___________________________________________________________________________________________________________________________________________________

Check to see if a string has the same amount of 'x's and 'o's. The method must return a boolean and be case insensitive. The string can contain any char.

Examples input/output:

XO("ooxx") => true
XO("xooxx") => false
XO("ooxXm") => true
XO("zpzpzpp") => true // when no 'x' and 'o' is present should return true
XO("zzoo") => false



function XO(str) {
    arr = str.split('');
    numX = 0;
    numO = 0;
    for (var i = 0; i < arr.length; i++)
      {
        if (arr[i] === 'x' || arr[i] === 'X')
          {
            numX++;
          }
        else if (arr[i] === 'o' || arr[i] === 'O')
          {
            numO++;
          }
      }
  if (numX === numO)
    {
      return true;
    }
  else
    {
      return false;
    }
}

___________________________________________________________________________________________________________________________________________________
//destructuring objects

const student = {
  name: 'katie',
  age: 28,
  location: 'minnesota',
  occupation: 'teacher',
  pets: [
    {name: 'lenny', type: 'dog'}
  ]
}

//destructure this
var {name, occupation, pets} = student

//print Katie
console.log(name)

//print 'dog'
console.log(pets[0].type)

//print teacher
console.log(occupation)


___________________________________________________________________________________________________________________________________________________
//destructure array;
//always starts at 0 index

var numbers = [1, 2, 3, 4];

var uno = numbers[0];
var uno = numbers[0];
var uno = numbers[0];

var [uno, dos, tres] = numbers;

console.log(uno);



___________________________________________________________________________________________________________________________________________________

const countries = ['Germany', 'USA', 'England', 'Thailand', 'Mexico'];

var [one, two, three, four, five] = countries
console.log(five)

___________________________________________________________________________________________________________________________________________________
//spread operator (dont know how many inputs)

var someFunction = (...args) => {
  console.log(args);
}

someFunction('hi', 'hello', 'goodbye');


___________________________________________________________________________________________________________________________________________________
//example of object.assign - create shallow copies of objects

const user = { username: 'angelica' }

const adminUser = Object.assign({}, user, { admin: true })

console.log(user)
// => { username: 'angelica' }

console.log(adminUser)
// => { username: 'angelica', admin: true }
___________________________________________________________________________________________________________________________________________________

//add/change/delete properties
const clock = {
  hours: 13,
  minutes: 40,
}

const clone = {
  ...clock,
  seconds: 46,
}
// clock => { hours: 13, minutes: 40 }
// clone => { hours: 13, minutes: 40, seconds: 46 }

const clock = {
  hours: 13,
  minutes: 40,
  seconds: 23,
}

const clone = {
  ...clock,
  minutes: 12,
}
// clock => { hours: 13, minutes: 40, seconds: 23 }
// clone => { hours: 13, minutes: 12, seconds: 23 }

const clock = {
  hours: 13,
  minutes: 40,
  seconds: 23,
}

const { seconds, ...clone } = clock
// clock => { hours: 13, minutes: 40, seconds: 23 }
// clone => { hours: 13, minutes: 12 }
___________________________________________________________________________________________________________________________________________________
var nums = [1, 4, 6, 7];

for (var val of nums) {
    console.log(val);
}

___________________________________________________________________________________________________________________________________________________

//example for scope
function outerFunc() {
  let outerVar = 'I am ouside!';

  function innerFunc() {
    var name = 'poli';
    console.log(name);
    console.log(outerVar);
  }
  console.log(outerVar);
  return innerFunc;
};

// outerFunc();
var myInnerFunc = outerFunc();
myInnerFunc();
___________________________________________________________________________________________________________________________________________________

//example of recursion
var factorial = (number) => {
  // If the number is negative, it doesn't have a factorial. Return an
  // impossible value to indicate this.
  if (number < 0) {
    return -1;
  }

  // If the number is zero, its factorial is one.
  if (number === 0) {
    return 1;
  }

  // If the number is neither illegal nor zero, call factorial again,
  // this time passing in a smaller number. Eventually we'll reach 0,
  // causing each call to return to its caller and the recursion terminates.
  return (number * factorial(number - 1));
}
console.log(factorial(5));

___________________________________________________________________________________________________________________________________________________

//another example of recursion

const countDownNums = (seconds) =>
{
  if (isNaN(seconds))
  {
    return NaN;
  }
  else if (seconds < 0)
  {
    return 'No negative numbers'
  }
  else if (seconds == 0)
  {
    console.log('we have lift off!');
    return;
  }
  console.log(seconds);
  countDownNums(seconds - 1);
}

countDownNums(10);

___________________________________________________________________________________________________________________________________________________

//yet another example of recursion
//note, you can initialize a variable (output in this instance) by declaring it as parameter of the parent function
function reverseString(output, string) {
  if (string.length === 0)
  {
    console.log(output);
    return output;
  }
  else
  {
    reverseString(output.concat(string.charAt(string.length-1)),string.slice(0, -1));
  }
}
reverseString('',"hello world");



function reversString(string) {
  if(typeof string !== 'string')
  {
    return
  }
  if(string.length === 0) {
    return "";
  }
  else {
    //console.log(string);
    return reverseString(string.substring(1)) + string[0] //.substring is the string starting at var 1 (or the second variable), 
  //ello + h 
  //llo + e  + h
  //lo + l + e + h
  //0 + l + l + e + h
  //each time the recursive function is called, the values are put into a stack, then combined when escape criteria are met
  //call stack here
    //Hello
                //f(ello)        + H
                //f(llo) + e
            //f(lo) + l
        //f(o) +l
  //f('') + o

  }
}

___________________________________________________________________________________________________________________________________________________
//example of recursion with loops
//each instance of the recursion pauses the previous one and it's variables are saved at that point
//

1	var rockPaperScissors = (rounds) => {
2	  var outcomes = [];
3	  //create the result array
4	  var plays = ['rock', 'paper', 'scissors'];
5	  //array of possible outcomes
6	  var getOutcomes = (playedSoFar, roundsLeft) => {    
7	    if (roundsLeft === 0) {
8	      outcomes.push(playedSoFar);
9	    }
10	    else {
11	      for (var i = 0; i < plays.length; i++) { //can also do for(x in plays) and then plays[x]
12	        getOutcomes(playedSoFar.concat(plays[i]), roundsLeft-1);
13	      }
14	    }
15	  };
16	  getOutcomes([], rounds);
17	  return outcomes;
18	};
19	rockPaperScissors(3);


//another example
var rockPaperScissors = (numberOfPlays) => {
  //declare output array
  var outcomes = [];
  var plays = ["rock", "paper", "scissors"];
  //declare the function
  function recurse (list, n) { //list: list of plays we're going to build, n: number of plays we have remaining
  if(n === 0) {
    outcomes.push(list)//if no plays left, the list will be numberOfPlays
  }
  else {
    for (const play of plays) {
      list.push(play)
      const l = list.slice() //making a copy of the array 'list'
      recurse(l, n-1) // n-1 = one less # of plays remaining
      list.pop(); //undo the play you just made, remove last item from list array
    }
  }
  }
  recurse([], numberOfPlays);
  return outcomes;
};
rockPaperScissors(3);
______________________________________________________________________________________________________________________


