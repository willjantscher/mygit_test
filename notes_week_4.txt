11/9/20_______________________________________________________________________________________________________________________________________
//project with react like checkpoint
//install postman



EXPRESS 
CRUDL (Create/Read/Update/Delete/List)

REST, or Representational State Transfer, is an architectural style for providing standards that makes it easier for computer systems to communicate.

REST is a robust API architecture
    CRUDL is for keeping records current and permanent

HTTP request line:
    method
    path componenet of the url
    an HTTP versio number
status line:
    http version number
    status code
    erason phrase 

The endpoint (or route) is the url you request for.
The path determines the resource you’re requesting for.

REST
    restful api uses HTTP requests to GET, PUT, POST, and DELETE data
    PUT and PATCH, PUT - supplies modified data that replaces original resource
        PATCH - updates an element of the original resource
    POST - adds something new

CRUD    -how you actually interact with your database
    POST - Create
    GET - Read
    PUT - Update/replaces
    PATCH - Update/Modify
    DELETE - Delete
CRUD operations act on a database (persist)

Status codes 
2xx success
4xx client error
...

Express.js = back end web application framework for Node.js 
    designed for buidlding web application...
var express = require('express')
Route definition takes the following structure: app.METHOD(PATH, HANDLER)

Query parameters are a defined set of parameters attached to the end of a URL.
They are extensions of the URI that are used to help define specific content or actions based on the data being passed.
Query params start with the first ? and end with the first # 
allowable characters:
    a-z, A-Z
    0-9
    / ? : @ ! $ & ' ( ) * + , ; = - . _ ~
To add multiple parameters, an ‘&’ is added in between each.

Path parameters are part of the URL itself. To separate them from the verbs used in the URL, a colon should prefix any variable name. 
req.params will retrieve all path parameters and return them in a JavaScript object.

Headers are metadata about an HTTP request.

11/10/20_______________________________________________________________________________________________________________________________________
EXPRESS

req- request
res- response

must restart
    npm install --save-dev nodemon      will auto restart server on save, will be added to json

to initialize an express project
    //create new repo
    //npm init
    //npm install express
    //to run - node <app name.js>
        //npm install -g nodemon
        //nodemon app.js        will run the app with nodemon, will restart local host on save

convention to call highest level program in a project app.js
get doesn't need a body, posts involve a body (should be parsed)

Everything coming from a json is parsed as a string since it is in qoutes, need to parseInt()
.find() returns one thing that matches, not an array of results. .filter() and then [0] index will yield the same result

headers application/json makes it expect json format

postman is usefull when we don't have a front end - ie, a button/input would collect user data and send a get/post... request to the server


github repos -
    usaf-express-challenge
    usaf-express-challenge-2

Cookies
Cookies are arbitrary pieces of data, usually chosen and first sent by the web server, and stored on the client computer by the web browser. 
Cookies help answer the question: "how to remember information about the user?"
Cookies are saved in name-value pairs like: > username = Suzy Galvanize

3 main uses for cookies
    Session management - keeps users logged in, shopping carts full, scores of sports games, etc.
    Personalization - allows users to have personalized preferences, themes, settings, colors, sounds, etc.
    Tracking - analyzing, recording, and motitoring user behavior

cmd opt j to open chrome dev tools

cookies max of 4kb for all cookies
set by server in the Set-Cookie header
sent back up to the server throught he Cookie header

express has build in helpers for cookies
    var cookieParser = require('cookie-parser')
    app.use(cookieParser())
        req.cookies //access cookies
        res.cookie()    //write a cookie (with key and value)
        res.clearCookie()   //clear the cookie("key")

using HTTPS - encrypts http requests to/from the server, can set in res.cookie()
can have persistant always

cookie - piece of data a server sends to the user's web browser, 
    browser may store it and send it back with the next request to the same server











Schema and Query Design 






