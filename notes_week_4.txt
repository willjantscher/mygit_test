11/9/20_______________________________________________________________________________________________________________________________________
//project with react like checkpoint
//install postman
https://docs.google.com/document/d/1aTn-1l2wJzkT6eB1NLVjEIV8ybHVUlJfHpkA8Ujl4u8/edit




EXPRESS 
CRUDL (Create/Read/Update/Delete/List)

REST, or Representational State Transfer, is an architectural style for providing standards that makes it easier for computer systems to communicate.

REST is a robust API architecture
    CRUDL is for keeping records current and permanent

HTTP request line:
    method
    path componenet of the url
    an HTTP versio number
status line:
    http version number
    status code
    erason phrase 

The endpoint (or route) is the url you request for.
The path determines the resource you’re requesting for.

REST
    restful api uses HTTP requests to GET, PUT, POST, and DELETE data
    PUT and PATCH, PUT - supplies modified data that replaces original resource
        PATCH - updates an element of the original resource
    POST - adds something new

CRUD    -how you actually interact with your database
    POST - Create
    GET - Read
    PUT - Update/replaces
    PATCH - Update/Modify
    DELETE - Delete
CRUD operations act on a database (persist)

Status codes 
2xx success
4xx client error
...

Express.js = back end web application framework for Node.js 
    designed for buidlding web application...
var express = require('express')
Route definition takes the following structure: app.METHOD(PATH, HANDLER)

Query parameters are a defined set of parameters attached to the end of a URL.
They are extensions of the URI that are used to help define specific content or actions based on the data being passed.
Query params start with the first ? and end with the first # 
allowable characters:
    a-z, A-Z
    0-9
    / ? : @ ! $ & ' ( ) * + , ; = - . _ ~
To add multiple parameters, an ‘&’ is added in between each.

Path parameters are part of the URL itself. To separate them from the verbs used in the URL, a colon should prefix any variable name. 
req.params will retrieve all path parameters and return them in a JavaScript object.

Headers are metadata about an HTTP request.

11/10/20_______________________________________________________________________________________________________________________________________
EXPRESS

req- request
res- response

must restart
    npm install --save-dev nodemon      will auto restart server on save, will be added to json

to initialize an express project
    //create new repo
    //npm init
    //npm install express
    //to run - node <app name.js>
        //npm install -g nodemon
        //nodemon app.js        will run the app with nodemon, will restart local host on save

convention to call highest level program in a project app.js
get doesn't need a body, posts involve a body (should be parsed)

Everything coming from a json is parsed as a string since it is in qoutes, need to parseInt()
.find() returns one thing that matches, not an array of results. .filter() and then [0] index will yield the same result

headers application/json makes it expect json format

postman is usefull when we don't have a front end - ie, a button/input would collect user data and send a get/post... request to the server


github repos -
    usaf-express-challenge
    usaf-express-challenge-2

Cookies
Cookies are arbitrary pieces of data, usually chosen and first sent by the web server, and stored on the client computer by the web browser. 
Cookies help answer the question: "how to remember information about the user?"
Cookies are saved in name-value pairs like: > username = Suzy Galvanize

3 main uses for cookies
    Session management - keeps users logged in, shopping carts full, scores of sports games, etc.
    Personalization - allows users to have personalized preferences, themes, settings, colors, sounds, etc.
    Tracking - analyzing, recording, and motitoring user behavior

cmd opt j to open chrome dev tools

cookies max of 4kb for all cookies
set by server in the Set-Cookie header
sent back up to the server throught he Cookie header

express has build in helpers for cookies
    var cookieParser = require('cookie-parser')
    app.use(cookieParser())
        req.cookies //access cookies
        res.cookie()    //write a cookie (with key and value)
        res.clearCookie()   //clear the cookie("key")

using HTTPS - encrypts http requests to/from the server, can set in res.cookie()
can have persistant always

cookie - piece of data a server sends to the user's web browser, 
    browser may store it and send it back with the next request to the same server










11/12/20_______________________________________________________________________________________________________________________________________
Schema and Query Design -can use PostgreSQL or mysql
join tables join many-to-many relationships
    want one-to-many or many-to-one relationships in databases
    need one source of truth (ids)

ERD - Entity Relationship Diagrams
walk through of solutions, express checkpoint.
    databases

install relational database system like PostgreSQL
    https://github.com/gSchool/sql-curriculum/blob/master/Introduction.md
    https://github.com/gSchool/sql-curriculum/blob/master/Install%20-%20Homebrew.md

https://app.diagrams.net/#G13PYrofQOTuuaczCfguEVWs7j6ejFtzKK
SQL - sequel

Entity - distinct units of information. manifest as tables in a database
    table - a collection of closely related columns. consists of rows each of which shares the same columns but may very in column vlues
    field - each entity contains one or more fields that describe the properties of that entity
    column - single unit of named data that has a particular data type. only exist in tables
    row - one set of related values for all of the columns declared in a given table. entries stored in a table
    record - entries stored in a table
    primary key - a column or group of columns in a given table that uniquely identifies each row of the table  
        used in conjunction with a foreign key in another (or event he same) table to relate the two tables togethre
    foreign key - one or more columns in a table intended to contain only values thta match the related primary/unique key column(s) in the referenced table. 
        foreign and primary keys explicitly define the direct relationships between tables
column ~ field
table ~ entity
row ~ record
    column becomes a field, once we use and it has data, same with table/row...
    column, row and table are skeleton
        field, entity, record when data is present

Schema - how data is organized in a database and relationships among its different entities
    -blueprint for your database
    defines name of tables and details of what information is stored in each column
Query - a way to request information from a database using statements
    Request - retrieves infro from database
    action - request that additional action be performed (updating, deleting, and inserting the database)
Entity relationships 
    one-to-one - each row in a table is connected top only one row in another table
    one-to-many - each row in the related to table can be related to many rows in the relating table
    many-to-many - one or more rosw in a table can be related to 0, 1, or many rows in another table
        a join table is a table that is made entirely of foreign keys!!

SQL statements
    REQUEST Statements
        SELECT * FROM ___
            all caps are keywords
            * means all 
                ex: SELECT * FROM Students will return full table of Students
        SELECT * FROM ___ WHERE __ = "__"
            WHERE specifies a specific constratint
                ex: SELECT * FROM Students WHERE Name = "Jim Mattis";
    ACTION Statements:
        DELETE FROM ___ WHERE __ IN ("")
            ex: DELETE FROM Students WHERE Name IN ("Jim Mattis","Jane Dough"):
        INSERT INTO ___ VALUES("")
            ex: INSERT INTO Students (StudentID, Name) VALUES("291129","Tom Cruise");
    examples
        SELECT * FROM Classes;
        SELECT StudentID FROM Students;
        INSERT INTO Classes (ClassID,Name) VALUES ("010011","Computer Science 101");
        INSERT INTO Students (StudentID,Name) VALUES("1001","Bob"),("1002","Bill"),("1003","Jane");

Foreign and Primary Keys
https://app.diagrams.net/#G1U3P5SIw7EgSNz60GLg-Rib0E0Dfkx69q
    Draw.io 
    use Entity Releationship Diagram (ERD)
    lines indicate one to one or one to many etc...
use diagram to show relationships
    create join table
    add fields and data
Data types
https://www.postgresql.org/docs/9.5/datatype.html

SQL joins   https://blog.codinghorror.com/a-visual-explanation-of-sql-joins/
5 types of joins
    Inner join - only the set of records that match in both Table A and Table B 
    Full outer join - produces the set of all records in Table A and Table B (with matchin records from both sides where available. if there is no match, the missing side will contain null)
    Left/right outer join - 
    Left/Right outer unique -
    Full outer join unique - 
https://www.db-fiddle.com/
https://github.com/gSchool/sql-curriculum/blob/master/Entity%20Relationship%20Diagrams.md#why-is-an-entity-relationship-diagram-useful

Constraints
   A not-null constraint simply specifies that a column must not assume the null value.
   A unique constraint ensures that the data contained in a column is unique among all the rows in the table. 
   A primary key constraint indicates that a column can be used as a unique identifier for rows in the table.
   A foreign key constraint specifies that the values in a column must match the values appearing in some row of another table. 


----------------------------------------------------------------------------------------------------------------
Schema SQL

CREATE TABLE owners (
  id serial PRIMARY KEY,
  name text
  );
  
  CREATE TABLE species (
  id serial PRIMARY KEY,
  species text
  );
  
 CREATE TABLE pets (
 id serial PRIMARY KEY,
   name text,
   species_id integer NOT NULL REFERENCES species ON DELETE CASCADE 
   );
   
CREATE TABLE owners_pets (
  id serial PRIMARY KEY,
  owner_id integer NOT NULL REFERENCES owners ON DELETE CASCADE,
  pet_id integer NOT NULL REFERENCES pets ON DELETE CASCADE
  );
     
     
  INSERT INTO owners (name) VALUES ('Bob'),('Bill');
  INSERT INTO species (species) VALUES ('cat'),('dog'),('fish');
  INSERT INTO pets (name, species_id) VALUES ('REX',1),('Star',2),('Ringo',3),('Bubbles',2);
  INSERT INTO owners_pets (owner_id,pet_id) VALUES (1,1),(1,3),(1,4),(2,2);

Query SQL

SELECT * FROM owners;
SELECT * FROM species;
SELECT * FROM pets;
SELECT * FROM owners_pets;



SELECT * FROM pets INNER JOIN species ON pets.species_id = species.id;
SELECT species.id, name, species FROM pets INNER JOIN species ON pets.species_id = species.id;

----------------------------------------------------------------------------------------------------------------
PostgreSQL

REPL - Read-Eval-Print-Loop
PostgreSQL REPL is a read-evaluate-print loop where you can play around and experiment with new database concepts.

To start a PostgreSQL server as a service, run the following command.
    brew services start postgresql
to see if the server has started
    brew services list
to stop the service 
    brew services stop postgresql
brew services --help
Once a server is running,...
To list all the databases in the default cluster
    psql -l
to create a database
    createdb movie_junkies_dev
to drop (destroy) a db
    dropdb movie_junkies_dev

To install configuration for REPL
    curl -fsSL https://git.io/v1Q1O | sh
to connect a db to REPL,
    psql movie_junkies_dev
to get helop with commands
    help
to list all databases inside the default PostgreSQL cluster
    \l 
to create a database for the environment
    CREATE DATABASE movie_junkies_test;
to connect the REPL to the db just createdb
    \c movie_junkies_test
switch REPL back    
    \c movie_junkies_dev
to drop the database
    DROP DATABASE movie_junkies_test;
to quite the PostgreSQL
    \q 



END SQL commands with a semicolon!!!!!





-----------------------------------
mysql   
    mysql.server start
    mysql.server stop
-----------------------------------

https://github.com/gSchool/sql-curriculum/blob/master/PSQL.md

select views the records, describe shows the table schema (data types and names of fields)

11/13/20_______________________________________________________________________________________________________________________________________
In console
    brew services start postgresql      //start postgresql 
        brew services list              //
    psql postgres       //enter the replaces
    \l      list all servers
    CREATE DATABASE 
    \d      //shows details
    \d <table name>         //show details of that table
    \h          //shows all commands
    \?          //shows more commands
    \c <database name>          //connect to that database

JOINS 
    Inner join - only what both tables shares
    Full outer join - all records in both tables
    Left/Right outer join - complete set of records for one table
    Left/Right outer unique - unique records for one table
    full outer unique - unique records for both tables

//EXAMPLE DATABASE---------------------------------------------------------------------------------------------------------
    //start psql in console
         brew services start postgresql
    //check servers
        psql 
    //go into REPL for psql
        psql postgres
    //create database
        CREATE DATABASE test;
    //connect to database
        \c test;
    //create 2 tables (once connected to daatabase)
        CREATE TABLE A (id serial PRIMARY KEY, name text);
        CREATE TABLE B (id serial PRIMARY KEY, name text);
    //check table
        \d A 
        \d B 
    //input data
        INSERT INTO A (name) VALUES ('Pirate'),('Monkey'),('Ninja'),('Spaghetti');
            //must use single quotes and don't have id input
    //See entries in the table
        SELECT * FROM A;
    //input more data to table Bill
        INSERT INTO B (name) VALUES ('Rutabaga'),('Pirate'),('Darth Vader'),('Ninja');
    //See entries in the table
        SELECT * FROM B;
    //CHECK in PG ADMIN
        under database, test, schemas, tables, (right click on table and view all rows)
    //Inner join - select all items that have same name in A and B. Outputs 4 columns, with ids and manifest
        SELECT * FROM A INNER JOIN B ON A.name = B.name;
            SELECT A.name, B.name from A INNER JOIN B ON A.name = B.name;   //will only return names (2 column)
    //Full outer join - pulls everything, if names not shared, will populate with null
        SELECT * FROM A FULL OUTER JOIN B ON A.name = B.name;   
    //Left outer join - all items in table A and matches to table B, not shared populate with null
        SELECT * FROM A LEFT OUTER JOIN B ON A.name = B.name;
    //Left outer join unique - only items that are in table A, i.e. unique to table A 
        SELECT * FROM A LEFT OUTER JOIN B ON A.name = B.name WHERE B.id IS null;
    //Full outer join uniqe - all items that are unique to each table (A and B)
        SELECT * FROM A FULL OUTER JOIN B ON A.name = B.name WHERE A.id IS null OR B.id IS null;
            //Cross join - all possible cominations in table
                SELECT * FROM A CROSS JOIN B;
    //in PG ADMIN
        right click on table, scripts, SELECT, (or ckick database with arrows at top left to open new query editor)
            can enter queries and get data output, (syntax gets highlighted)
dump a database
    -exports a database (-- is a comment in SQL)
        pg_dump dbname > outfile
                //dbname is name of database in psql, outfile is directory for output ~/Desktop/filename
    pg_dump test > ~Desktop/test    (in console)
    psql sci_fi_empty < infile
    psql sci_fi < infile
        1. put DB dump fiiles on Desktop
        2. go into psql database
            3. create database with name you want   --db names must match 
            CREATE DATABASE sci_fi_empty;
        3. in terminal, 
            psql sci_fi_empty < ~/Desktop/sci_fi_empty    
    \c sci_fi_data
    \d  //return details
    \dt actor       //details on actor table
PRESS Q to exit from query result viewer in psql

---------------------------------------------------------------------------------------------------------
PG ADMIN
    Add server
    owner name (in psql list) set to username on pg admin
        williamjantscher
PSQL - PostgreSQL Command Line Tools
    https://github.com/gSchool/sql-curriculum/blob/master/PSQL.md
Entity Relationship Diagrams
    https://github.com/gSchool/sql-curriculum/blob/master/Entity%20Relationship%20Diagrams.md#why-is-an-entity-relationship-diagram-useful
INTRO to SQL
    https://github.com/gSchool/sql-curriculum/blob/master/SQL%20Intro.md
Dump or restore database
    https://www.postgresql.org/docs/9.1/backup-dump.html


---------------------------------------------------------------------------------------------------------
SQL SYNTAX!!!!!!!
    https://github.com/gSchool/sql-curriculum/blob/master/SQL%20Intro.md
SQL restful API
    https://blog.logrocket.com/setting-up-a-restful-api-with-node-js-and-postgresql-d96d6fc892d8/
---------------------------------------------------------------------------------------------------------
Persistence

connect EXPRESS application with Postgres database
    var pgp = require('pg-promise')(/* options */)
    var db = pgp('postgres://username:password@host:port/database')

    db.one('SELECT $1 AS value', 123)
    .then(function (data) {
        console.log('DATA:', data.value)
    })
    .catch(function (error) {
        console.log('ERROR:', error)
    })
want your connection and configuration details in a seperate permission restricted file that is not accessible to version control
    const Pool = require('pg').Pool
    const pool = new Pool({
    user: 'me',    
    host: 'localhost',
    database: 'api',
    password: 'password',
    port: 5432,
    })
passing a query to the database
    const getUsers = (request, response) => {
        pool.query('SELECT * FROM users ORDER BY id ASC', (error, results) => {
            if (error) {
                throw error
        }
        response.status(200).json(results.rows)
    })
    }

in postgres
    \conninfo       gives user information
https://node-postgres.com/api/result
https://blog.logrocket.com/setting-up-a-restful-api-with-node-js-and-postgresql-d96d6fc892d8/

INSTALL DOCKER

Databases checkpoint













