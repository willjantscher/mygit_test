11/2/20_______________________________________________________________________________________________
HTML and CSS
using REACT

<!-- to open in command line, type open index.html -->

<ol></ol>    open line
<li>text</li>   list item

<ul>    unordered list, gives dots
<br>    gives line break
<h1>    header, larger test
<p>     paragraph
<hr>    gives a horizontal rule

<img src="" alt="">     source then address, alt then text, will put in text if source not working
<span>something</span>

--------------------------------------------------------------------------------
pwd             //show location
cd ~/Desktop    //change directory
cd html         //go into html foder we created
git init        //initialize this in git
ls -la          //show all files including hidden ones
git status
git add .
git commit -m'some message'
git diff index.html         //will show differences
git show-branch         //will show the last commit message


command option j to open the code in chrome brower

//install iTerm in conjunction with zsh and oh-myzsh
    install power line font something
--------------------------------------------------------------------------------

you can add attributes to tags  -these are in quotes below
    ex: div class="collapsabile"

id is unique
class can be shared over ultiple items

the label for="" should match the input id


Tuesday will be on our own
Finish everything in learn
get ready for REACT
details in mattersmost
Install things mentioned in the tutorial for REACT  


must do tutorial
work through the learn (as much as you want)


11/2/20_______________________________________________________________________________________________
self work due to elections today
DOM Minipulation
    Document Object Model - a representation of the HTML files
    DOM manipulation - chanigning the structure of the page as users interact with item
    DOM is an API - application programming interface - a way for programs to interact with each-other
web page is a Document
    textually represented- HTML
    visually represented - browser window
    digitally represented  - DOM
tree data structure
    root node
        nodes
            more nodes
child and parent nodes


----------------------------------------------------------------------------------------------------------------------------------------------------------------
https://jsfiddle.net/willjantscher/mpvfcr6z/88/ and https://jsfiddle.net/willjantscher/akxb0qmy/38/
Code for DOM manipulation

document.addEventListener('DOMContentLoaded', function () {
  // Write your code here! Don't forget the above in later lessons.
	const footer = document.querySelector("footer")
  //console.log(footer)
  
  const removeMe = document.querySelector("div")
  //console.log(removeMe)
  
  
  removeMe.parentNode.removeChild(removeMe)
/*   document.body.removeChild(removeMe)
  console.log(removeMe) */
  
  footer.className = "galvanize-link"
  //console.log(footer.className)

	/* footer.innerHTML = "test" */
  
  document.getElementsByTagName("a")[0].setAttribute("href", "http://galvanize.com/");
  
/* 	footer.setAttribute("href", "http://galvanize.com/");
	  console.log(footer) */
    
    var newHeader = document.createElement('h1')
    var headerNode = document.createTextNode("this is my text in a header.")
    
    newHeader.appendChild(headerNode);
        
    document.body.insertBefore(newHeader, document.body.children[0])
    
    newHeader.text="something here"
    
})
----------------------------------------------------------------------------------------------------------------------------------------------------------------
addEventListener
monitorEvents(window)
when manipulating the DOM, it's important that your javascript code not load until the DOM is ready. There are a couple of ways to do this. The most common way is to use the DOMContentLoaded event:

When an event happens. It captures down the DOM tree from <html> to the element where the event happened. Then, it bubbles back up the DOM tree until it gets back to <html>. Along each element it passes, it fires the event.
These 2 phases -- event capturing and event bubbling -- are collectively known as event propagation.
There is a third Boolean parameter of addEventListener that specifies if you want the handler to fire on capture or bubble. It defaults to false, which is bubble. But if you set it to true, it will fire on capture.

CSS
Cascading Style Sheets
Internal
    <head>
    <title><title>
    <style type=”text/css”>
    CSS Content Goes Here
    </style>
    </head>
    <body>
External
    <link rel=”stylesheet” type=”text/css” href=“Path To stylesheet.css” />
or 
    <style type=”text/css”>@import url(Path To stylesheet.css)</style>
<head>
<title><title>
<link rel=”stylesheet” type=”text/css”href=”style.css” />
</head>
<body>

Inline
    <p style=”color: #ff0000;”>Some red text</p>
All the various methods will cascade into a new “pseudo” stylesheet in the following order:
    Inline Style (inside (X)HTML element)
    Internal Style Sheet (inside the <head> tag)
    External Style Sheet

HTML Elements (div, p, ul, etc) are the least specific CSS selectors. The next level of specificity is provided by classes. To add a class to an element, we use a class attribute. For example, give your first HTML div a class of "red", and then change your stylesheet to look like this:
order of specificity (increasing)
    HTML Elements (div, p, ul, etc)
    class attribute (reference with .classname)
    id (reference with #)
    After ids, the next level of specificity is inline styling. After that is the !important tag. (dont use either of these)
most specific item takes priority

IDs should be completely unique
classes do not need to be

Can use CSS frameworks 
https://materializecss.com/
https://getbootstrap.com/docs/4.5/getting-started/introduction/
    these will make things pretty at first
----------------------------------------------------------------------------------------------------------------------------------------------------------------

use Bootstrap Cascading Content Delivery Network

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" integrity="sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==" crossorigin="anonymous">

<!-- Optional theme -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css" integrity="sha384-aUGj/X2zp5rLCbBxumKTCw2Z50WgIr1vs/PFN4praOTvYXWlVyh2UtNUU0KAUhAX" crossorigin="anonymous">

<!-- Latest compiled and minified JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js" integrity="sha512-K1qjQ+NcF2TYO/eI3M6v8EiNYZfA95pQumfvcVrTHtwQVDG+aHRqLi/ETn2uB+1JqwYqVG3LIvdm9lj6imS/pQ==" crossorigin="anonymous"></script>

----------------------------------------------------------------------------------------------------------------------------------------------------------------
REACT
https://reactjs.org/tutorial/tutorial.html

npx create-react-app my-app
    or npm init react-app my-app
cd my-app
npm start
    can start from a template
--template [template-name] 

11/4/20_______________________________________________________________________________________________________________________________________
REACT
    go through tutorial
    go through learn modules
    finish html problem submission
    review DOM manipulation
    more react

----------------------------------------------------------------------------------------------------------------------------------------------------------------
React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called “components”.
We use components to tell React what we want to see on the screen. 
A component takes in parameters, called props and returns a hierarchy of views to display via the render method.
The render method returns a description of what you want to see on the screen. 
    ender returns a React element - lightweight description of what to render
React uses JSX syntax
    The <div /> syntax is transformed at build time to React.createElement('div').
You can put any JavaScript expressions within braces inside JSX.

In JavaScript classes, you need to always call super when defining the constructor of a subclass. 
    All React component classes that have a constructor should start with a super(props) call.

when you call setState in a component, React automatically updates the child components inside of it too.
The DOM <button> element’s onClick attribute has a special meaning to React because it is a built-in component. For custom components like Square, the naming is up to you. We could give any name to the Square’s onClick prop or Board’s handleClick method, and the code would work the same. In React, it’s conventional to use on[Event] names for props which represent events and handle[Event] for the methods which handle the events.

In React, function components are a simpler way to write components that only contain a render method and don’t have their own state.
     Instead of defining a class which extends React.Component, we can write a function that takes props as input and returns what should be rendered

ternary operator
    condition ? expr1 : expr2 
    if condition true, return expr1, else expr2

Unlike the array push() method you might be more familiar with, the concat() method doesn’t mutate the original array, so we prefer it.
----------------------------------------------------------------------------------------------------------------------------------------------------------------


JSX (JavaScript + XML) is an extension of JavaScript that allows you to write HTML directly within JavaScript.

To specify a CSS class, use the className attribute, instead.
    This applies to all regular DOM elements like <div>, <a>, and others. 
        The reason for this is that class is a reserved word in JavaScript.
https://flaviocopes.com/jsx-return-multiple-elements/

When writing JSX in React, there’s one caveat: you must return one parent item. Not more than one.
cant do this:
const Pets = () => {
  return (
    <Dog />
    <Cat />
  )
}
so do this: (but this creates an unecessary HTML element)
const Pets = () => {
  return (
    <div>
      <Dog />
      <Cat />
    </div>
  )
}
or this
const Pets = () => {
  return [
      <Dog />,
      <Cat />
  ]
}
or this
const Pets = () => {
  return (
    <Fragment>
      <Dog />
      <Cat />
    </Fragment>
  )
}

https://www.reactenlightenment.com/react-jsx/5.1.html
JSX is like a shorthand for calling React.createElement()

The syntax is intended to be used by preprocessors (i.e., transpilers like Babel) to transform HTML-like text found in JavaScript files into standard JavaScript objects that a JavaScript engine will parse.

A React Component is a function that returns a single React Element
The following defines a React Component called Greeting.

    import React from 'react';

    function Greeting(){
    return (
        <h1>Hello!</h1>
    )
    }

    export default Greeting

Components cannot return null or Objects or Arrays. They must return a single React element.
In order to use a React Component as a React Element, simply wrap it in a self-closing HTML tag.
Remember: a React component can only return a single element. If you need the component to display multiple elements or have nested child components, they must be wrapped in a single enclosing parent element.

To create a React component:
    Import React
    Define a function that returns a single React element
    Export the function with export default
To include a React component:
    Import React
    Define a function that returns a React element
    Within that React element reference the other component by wrapping it in self-closing HTML tags
https://facebook.github.io/react/docs/react-component.html

When you render a React Component, you can pass it data via props. 

anything inside {} gets evaluated as JavaScript

passing <Person /> elements the following props object:
{
  id: 43,
  firstName: "Michelle",
  lastName: "Obama"
}
  <Person id={43} firstName="Michelle" lastName="Obama" />

Deconstruction
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Pulling_fields_from_objects_passed_as_function_parameter

props on a component should never be altered in any way. They are immutable. Instead, if we want to be able to alter the data in any way we have a separate concept called State
    Class Component
In order for React to function properly, the setState method is the only means we should be using to manipulate state within a component.
https://reactjs.org/docs/react-component.html#setstate



DOM manipulation
https://www.w3schools.com/cssref/css_selectors.asp

REACT   
    items inside return are rendered
    document.title = "" changes the name on the browser tab
user stories: things the user wants and why, written by the user 


keep app class simple

put everything else outside of it

create a class for each section of the app

    make a file for each of the classes
    import these files into the app.js
        import './GroceryList'
        access with <GroceryList />


                      <GroceryList list={this.state.list}/>
                    can access with props.list inside grocerylist now
            look at event.value in console...
            capture inputfield React
            events.preventdefauls
https://forum.freecodecamp.org/t/getting-an-input-value-when-form-is-submitted-react/161870
https://www.sitepoint.com/work-with-forms-in-react/

.bind
    method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.
    in react, if passing a function around, need to bind it
    makes sure function is scoped to location it is scoped to
event.preventDefault()  --to prevent things from happening

event handlers

APP (component)
    Grocery list    (component)
        each individual grocery iten (maybe many components)

for components, export default componentname
import grocerylist from './grocerylist'

return should go inside the render () {}

if parent has state properties in the constructor, pass to child as props like
constructor() {
    this.state = {
        groceryItems : ['apples', 'banannas']
    }
}
    <GroceryList list={this.state.groceryItems}

    you can access this in GroceryLists as props.list (if initializing as function GroceryList(props))

good to map over props and convert each to a list item/button/something...
    const items = props.list.map(item => <li>{item}</li>)
    return (
        <div>
            {items}
        </div>
    )

form used to collect data   
    onSubmit={}. prevents default action, pass in a method to handle the action
    handleSubmit = (event) +>...
    use event.preventDefault()
    set constructor, this.state = {}
https://www.youtube.com/watch?v=fcMNZ7j4JSg&ab_channel=CodingEntrepreneurs


use hooks or redux to pass data across multiple children

app     
    list
        items


to learn hooks, go into react Context and useReducer


11/6/20_______________________________________________________________________________________________________________________________________
REACT app using pokemon API
    Fetching data
    











